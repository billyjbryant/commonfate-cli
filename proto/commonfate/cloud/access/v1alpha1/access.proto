syntax = "proto3";

package commonfate.cloud.access.v1alpha1;

import "commonfate/cloud/attest/v1alpha1/attestation.proto";
import "commonfate/cloud/access/v1alpha1/resource.proto";

service UserManagementService {
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}
}

service AccessService {
  rpc GetEntitlement(GetEntitlementRequest) returns (GetEntitlementResponse) {}
  rpc ListEntitlementsForProvider(ListEntitlementsForProviderRequest) returns (ListEntitlementsForProviderResponse) {}
  rpc CreateAccessRequest(CreateAccessRequestRequest) returns (CreateAccessRequestResponse) {}
}


message RegisterDeviceRequest {
  commonfate.cloud.attest.v1alpha1.Attestation attestation = 1;
  commonfate.cloud.attest.v1alpha1.Device device = 3;
}

message RegisterDeviceResponse {
  string device_id = 1;
  // true if the device already exists
  bool already_exists = 2;
}

message GetEntitlementRequest {
  Resource resource = 1;
}

message GetEntitlementResponse {
  Entitlement entitlement = 1;
}

message ListEntitlementsForProviderRequest {
  EntitlementProvider provider = 1;
  // currently unimplemented
  optional string page = 2;
  // currently unimplemented
  optional int32 limit = 3;
}

message ListEntitlementsForProviderResponse {
  repeated Entitlement entitlements = 1;
  // currently unimplemented
  optional string next_page = 2;
}

message CreateAccessRequestRequest {
  repeated Resource resources = 1;
  optional Justification justification = 2;
}

message CreateAccessRequestResponse {
  RequestGroup request_group = 1;
}

message RequestGroup {
  string id = 1;
  repeated AccessRequest requests = 2;
}

message AccessRequest {
  string id = 1;
  Entitlement entitlement = 2;
}

// an entitlement which is available for the user to request access to.
message Entitlement {
  Resource resource = 1;
  EntitlementStatus status = 2;
}

message Justification {
  optional string reason = 1;
  optional commonfate.cloud.attest.v1alpha1.Attestation device_attestation = 2;
}

enum EntitlementStatus {
  ENTITLEMENT_STATUS_UNSPECIFIED = 0;
  ENTITLEMENT_STATUS_ACTIVE = 1;
  ENTITLEMENT_STATUS_PROVISIONING = 2;
  ENTITLEMENT_STATUS_DEPROVISIONING = 3;
  ENTITLEMENT_STATUS_INACTIVE = 4;
}

enum EntitlementProvider {
  ENTITLEMENT_PROVIDER_UNSPECIFIED = 0;
  ENTITLEMENT_PROVIDER_AWS_IDC = 1;
  ENTITLEMENT_PROVIDER_GCP = 2;
}

message ListUsersRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  int32 current_page = 2;
  optional int32 next_page = 3;
  optional int32 previous_page = 4;
}

message User {
  string id = 1;
  string primary_email = 2;
  string first_name = 3;
  string last_name = 4;
  string avatar = 5;
}
