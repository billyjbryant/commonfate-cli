// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/cloud/access/v1alpha1/access.proto

package accessv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/ciem/gen/commonfate/cloud/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserManagementServiceName is the fully-qualified name of the UserManagementService service.
	UserManagementServiceName = "commonfate.cloud.access.v1alpha1.UserManagementService"
	// ResourceServiceName is the fully-qualified name of the ResourceService service.
	ResourceServiceName = "commonfate.cloud.access.v1alpha1.ResourceService"
	// AccessServiceName is the fully-qualified name of the AccessService service.
	AccessServiceName = "commonfate.cloud.access.v1alpha1.AccessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserManagementServiceListUsersProcedure is the fully-qualified name of the
	// UserManagementService's ListUsers RPC.
	UserManagementServiceListUsersProcedure = "/commonfate.cloud.access.v1alpha1.UserManagementService/ListUsers"
	// ResourceServiceListResourcesForProviderProcedure is the fully-qualified name of the
	// ResourceService's ListResourcesForProvider RPC.
	ResourceServiceListResourcesForProviderProcedure = "/commonfate.cloud.access.v1alpha1.ResourceService/ListResourcesForProvider"
	// AccessServiceEnsureAccessProcedure is the fully-qualified name of the AccessService's
	// EnsureAccess RPC.
	AccessServiceEnsureAccessProcedure = "/commonfate.cloud.access.v1alpha1.AccessService/EnsureAccess"
	// AccessServiceListAccessRequestsProcedure is the fully-qualified name of the AccessService's
	// ListAccessRequests RPC.
	AccessServiceListAccessRequestsProcedure = "/commonfate.cloud.access.v1alpha1.AccessService/ListAccessRequests"
	// AccessServiceGetAccessRequestProcedure is the fully-qualified name of the AccessService's
	// GetAccessRequest RPC.
	AccessServiceGetAccessRequestProcedure = "/commonfate.cloud.access.v1alpha1.AccessService/GetAccessRequest"
	// AccessServiceRevokeAccessRequestProcedure is the fully-qualified name of the AccessService's
	// RevokeAccessRequest RPC.
	AccessServiceRevokeAccessRequestProcedure = "/commonfate.cloud.access.v1alpha1.AccessService/RevokeAccessRequest"
	// AccessServiceCancelAccessRequestProcedure is the fully-qualified name of the AccessService's
	// CancelAccessRequest RPC.
	AccessServiceCancelAccessRequestProcedure = "/commonfate.cloud.access.v1alpha1.AccessService/CancelAccessRequest"
	// AccessServiceReviewAccessRequestProcedure is the fully-qualified name of the AccessService's
	// ReviewAccessRequest RPC.
	AccessServiceReviewAccessRequestProcedure = "/commonfate.cloud.access.v1alpha1.AccessService/ReviewAccessRequest"
)

// UserManagementServiceClient is a client for the
// commonfate.cloud.access.v1alpha1.UserManagementService service.
type UserManagementServiceClient interface {
	ListUsers(context.Context, *connect_go.Request[v1alpha1.ListUsersRequest]) (*connect_go.Response[v1alpha1.ListUsersResponse], error)
}

// NewUserManagementServiceClient constructs a client for the
// commonfate.cloud.access.v1alpha1.UserManagementService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserManagementServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userManagementServiceClient{
		listUsers: connect_go.NewClient[v1alpha1.ListUsersRequest, v1alpha1.ListUsersResponse](
			httpClient,
			baseURL+UserManagementServiceListUsersProcedure,
			opts...,
		),
	}
}

// userManagementServiceClient implements UserManagementServiceClient.
type userManagementServiceClient struct {
	listUsers *connect_go.Client[v1alpha1.ListUsersRequest, v1alpha1.ListUsersResponse]
}

// ListUsers calls commonfate.cloud.access.v1alpha1.UserManagementService.ListUsers.
func (c *userManagementServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1alpha1.ListUsersRequest]) (*connect_go.Response[v1alpha1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UserManagementServiceHandler is an implementation of the
// commonfate.cloud.access.v1alpha1.UserManagementService service.
type UserManagementServiceHandler interface {
	ListUsers(context.Context, *connect_go.Request[v1alpha1.ListUsersRequest]) (*connect_go.Response[v1alpha1.ListUsersResponse], error)
}

// NewUserManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserManagementServiceHandler(svc UserManagementServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userManagementServiceListUsersHandler := connect_go.NewUnaryHandler(
		UserManagementServiceListUsersProcedure,
		svc.ListUsers,
		opts...,
	)
	return "/commonfate.cloud.access.v1alpha1.UserManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserManagementServiceListUsersProcedure:
			userManagementServiceListUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserManagementServiceHandler struct{}

func (UnimplementedUserManagementServiceHandler) ListUsers(context.Context, *connect_go.Request[v1alpha1.ListUsersRequest]) (*connect_go.Response[v1alpha1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.UserManagementService.ListUsers is not implemented"))
}

// ResourceServiceClient is a client for the commonfate.cloud.access.v1alpha1.ResourceService
// service.
type ResourceServiceClient interface {
	ListResourcesForProvider(context.Context, *connect_go.Request[v1alpha1.ListResourcesForProviderRequest]) (*connect_go.Response[v1alpha1.ListResourcesForProviderResponse], error)
}

// NewResourceServiceClient constructs a client for the
// commonfate.cloud.access.v1alpha1.ResourceService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ResourceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourceServiceClient{
		listResourcesForProvider: connect_go.NewClient[v1alpha1.ListResourcesForProviderRequest, v1alpha1.ListResourcesForProviderResponse](
			httpClient,
			baseURL+ResourceServiceListResourcesForProviderProcedure,
			opts...,
		),
	}
}

// resourceServiceClient implements ResourceServiceClient.
type resourceServiceClient struct {
	listResourcesForProvider *connect_go.Client[v1alpha1.ListResourcesForProviderRequest, v1alpha1.ListResourcesForProviderResponse]
}

// ListResourcesForProvider calls
// commonfate.cloud.access.v1alpha1.ResourceService.ListResourcesForProvider.
func (c *resourceServiceClient) ListResourcesForProvider(ctx context.Context, req *connect_go.Request[v1alpha1.ListResourcesForProviderRequest]) (*connect_go.Response[v1alpha1.ListResourcesForProviderResponse], error) {
	return c.listResourcesForProvider.CallUnary(ctx, req)
}

// ResourceServiceHandler is an implementation of the
// commonfate.cloud.access.v1alpha1.ResourceService service.
type ResourceServiceHandler interface {
	ListResourcesForProvider(context.Context, *connect_go.Request[v1alpha1.ListResourcesForProviderRequest]) (*connect_go.Response[v1alpha1.ListResourcesForProviderResponse], error)
}

// NewResourceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourceServiceHandler(svc ResourceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	resourceServiceListResourcesForProviderHandler := connect_go.NewUnaryHandler(
		ResourceServiceListResourcesForProviderProcedure,
		svc.ListResourcesForProvider,
		opts...,
	)
	return "/commonfate.cloud.access.v1alpha1.ResourceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourceServiceListResourcesForProviderProcedure:
			resourceServiceListResourcesForProviderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourceServiceHandler struct{}

func (UnimplementedResourceServiceHandler) ListResourcesForProvider(context.Context, *connect_go.Request[v1alpha1.ListResourcesForProviderRequest]) (*connect_go.Response[v1alpha1.ListResourcesForProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.ResourceService.ListResourcesForProvider is not implemented"))
}

// AccessServiceClient is a client for the commonfate.cloud.access.v1alpha1.AccessService service.
type AccessServiceClient interface {
	// EnsureAccess is a high-level declarative API which can be called to ensure access has been provisioned to an entitlement.
	//
	// The method checks whether the entitlement has been provisioned to the user.
	// If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
	// If a pending Access Request exists for the entitlement, this request is returned.
	//
	// In future, this method may trigger an extension to any Access Requests which are due to expire.
	//
	// As an alternative to this high-level API, it is possible to use low-level APIs to achieve the same outcome:
	//
	// 1. call AccessService.Preflight() to check the status of the entitlement
	// 2. call AccessService.CreateAccessRequest() to request access to the entitlement
	//
	// This method is used by the Common Fate CLI in commands like 'cf exec gcp -- <command>' to ensure access
	// is provisioned prior to running a command.
	EnsureAccess(context.Context, *connect_go.Request[v1alpha1.EnsureAccessRequest]) (*connect_go.Response[v1alpha1.EnsureAccessResponse], error)
	ListAccessRequests(context.Context, *connect_go.Request[v1alpha1.ListAccessRequestsRequest]) (*connect_go.Response[v1alpha1.ListAccessRequestsResponse], error)
	GetAccessRequest(context.Context, *connect_go.Request[v1alpha1.GetAccessRequestRequest]) (*connect_go.Response[v1alpha1.GetAccessRequestResponse], error)
	RevokeAccessRequest(context.Context, *connect_go.Request[v1alpha1.RevokeAccessRequestRequest]) (*connect_go.Response[v1alpha1.RevokeAccessRequestResponse], error)
	CancelAccessRequest(context.Context, *connect_go.Request[v1alpha1.CancelAccessRequestRequest]) (*connect_go.Response[v1alpha1.CancelAccessRequestResponse], error)
	ReviewAccessRequest(context.Context, *connect_go.Request[v1alpha1.ReviewAccessRequestRequest]) (*connect_go.Response[v1alpha1.ReviewAccessRequestResponse], error)
}

// NewAccessServiceClient constructs a client for the commonfate.cloud.access.v1alpha1.AccessService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accessServiceClient{
		ensureAccess: connect_go.NewClient[v1alpha1.EnsureAccessRequest, v1alpha1.EnsureAccessResponse](
			httpClient,
			baseURL+AccessServiceEnsureAccessProcedure,
			opts...,
		),
		listAccessRequests: connect_go.NewClient[v1alpha1.ListAccessRequestsRequest, v1alpha1.ListAccessRequestsResponse](
			httpClient,
			baseURL+AccessServiceListAccessRequestsProcedure,
			opts...,
		),
		getAccessRequest: connect_go.NewClient[v1alpha1.GetAccessRequestRequest, v1alpha1.GetAccessRequestResponse](
			httpClient,
			baseURL+AccessServiceGetAccessRequestProcedure,
			opts...,
		),
		revokeAccessRequest: connect_go.NewClient[v1alpha1.RevokeAccessRequestRequest, v1alpha1.RevokeAccessRequestResponse](
			httpClient,
			baseURL+AccessServiceRevokeAccessRequestProcedure,
			opts...,
		),
		cancelAccessRequest: connect_go.NewClient[v1alpha1.CancelAccessRequestRequest, v1alpha1.CancelAccessRequestResponse](
			httpClient,
			baseURL+AccessServiceCancelAccessRequestProcedure,
			opts...,
		),
		reviewAccessRequest: connect_go.NewClient[v1alpha1.ReviewAccessRequestRequest, v1alpha1.ReviewAccessRequestResponse](
			httpClient,
			baseURL+AccessServiceReviewAccessRequestProcedure,
			opts...,
		),
	}
}

// accessServiceClient implements AccessServiceClient.
type accessServiceClient struct {
	ensureAccess        *connect_go.Client[v1alpha1.EnsureAccessRequest, v1alpha1.EnsureAccessResponse]
	listAccessRequests  *connect_go.Client[v1alpha1.ListAccessRequestsRequest, v1alpha1.ListAccessRequestsResponse]
	getAccessRequest    *connect_go.Client[v1alpha1.GetAccessRequestRequest, v1alpha1.GetAccessRequestResponse]
	revokeAccessRequest *connect_go.Client[v1alpha1.RevokeAccessRequestRequest, v1alpha1.RevokeAccessRequestResponse]
	cancelAccessRequest *connect_go.Client[v1alpha1.CancelAccessRequestRequest, v1alpha1.CancelAccessRequestResponse]
	reviewAccessRequest *connect_go.Client[v1alpha1.ReviewAccessRequestRequest, v1alpha1.ReviewAccessRequestResponse]
}

// EnsureAccess calls commonfate.cloud.access.v1alpha1.AccessService.EnsureAccess.
func (c *accessServiceClient) EnsureAccess(ctx context.Context, req *connect_go.Request[v1alpha1.EnsureAccessRequest]) (*connect_go.Response[v1alpha1.EnsureAccessResponse], error) {
	return c.ensureAccess.CallUnary(ctx, req)
}

// ListAccessRequests calls commonfate.cloud.access.v1alpha1.AccessService.ListAccessRequests.
func (c *accessServiceClient) ListAccessRequests(ctx context.Context, req *connect_go.Request[v1alpha1.ListAccessRequestsRequest]) (*connect_go.Response[v1alpha1.ListAccessRequestsResponse], error) {
	return c.listAccessRequests.CallUnary(ctx, req)
}

// GetAccessRequest calls commonfate.cloud.access.v1alpha1.AccessService.GetAccessRequest.
func (c *accessServiceClient) GetAccessRequest(ctx context.Context, req *connect_go.Request[v1alpha1.GetAccessRequestRequest]) (*connect_go.Response[v1alpha1.GetAccessRequestResponse], error) {
	return c.getAccessRequest.CallUnary(ctx, req)
}

// RevokeAccessRequest calls commonfate.cloud.access.v1alpha1.AccessService.RevokeAccessRequest.
func (c *accessServiceClient) RevokeAccessRequest(ctx context.Context, req *connect_go.Request[v1alpha1.RevokeAccessRequestRequest]) (*connect_go.Response[v1alpha1.RevokeAccessRequestResponse], error) {
	return c.revokeAccessRequest.CallUnary(ctx, req)
}

// CancelAccessRequest calls commonfate.cloud.access.v1alpha1.AccessService.CancelAccessRequest.
func (c *accessServiceClient) CancelAccessRequest(ctx context.Context, req *connect_go.Request[v1alpha1.CancelAccessRequestRequest]) (*connect_go.Response[v1alpha1.CancelAccessRequestResponse], error) {
	return c.cancelAccessRequest.CallUnary(ctx, req)
}

// ReviewAccessRequest calls commonfate.cloud.access.v1alpha1.AccessService.ReviewAccessRequest.
func (c *accessServiceClient) ReviewAccessRequest(ctx context.Context, req *connect_go.Request[v1alpha1.ReviewAccessRequestRequest]) (*connect_go.Response[v1alpha1.ReviewAccessRequestResponse], error) {
	return c.reviewAccessRequest.CallUnary(ctx, req)
}

// AccessServiceHandler is an implementation of the commonfate.cloud.access.v1alpha1.AccessService
// service.
type AccessServiceHandler interface {
	// EnsureAccess is a high-level declarative API which can be called to ensure access has been provisioned to an entitlement.
	//
	// The method checks whether the entitlement has been provisioned to the user.
	// If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
	// If a pending Access Request exists for the entitlement, this request is returned.
	//
	// In future, this method may trigger an extension to any Access Requests which are due to expire.
	//
	// As an alternative to this high-level API, it is possible to use low-level APIs to achieve the same outcome:
	//
	// 1. call AccessService.Preflight() to check the status of the entitlement
	// 2. call AccessService.CreateAccessRequest() to request access to the entitlement
	//
	// This method is used by the Common Fate CLI in commands like 'cf exec gcp -- <command>' to ensure access
	// is provisioned prior to running a command.
	EnsureAccess(context.Context, *connect_go.Request[v1alpha1.EnsureAccessRequest]) (*connect_go.Response[v1alpha1.EnsureAccessResponse], error)
	ListAccessRequests(context.Context, *connect_go.Request[v1alpha1.ListAccessRequestsRequest]) (*connect_go.Response[v1alpha1.ListAccessRequestsResponse], error)
	GetAccessRequest(context.Context, *connect_go.Request[v1alpha1.GetAccessRequestRequest]) (*connect_go.Response[v1alpha1.GetAccessRequestResponse], error)
	RevokeAccessRequest(context.Context, *connect_go.Request[v1alpha1.RevokeAccessRequestRequest]) (*connect_go.Response[v1alpha1.RevokeAccessRequestResponse], error)
	CancelAccessRequest(context.Context, *connect_go.Request[v1alpha1.CancelAccessRequestRequest]) (*connect_go.Response[v1alpha1.CancelAccessRequestResponse], error)
	ReviewAccessRequest(context.Context, *connect_go.Request[v1alpha1.ReviewAccessRequestRequest]) (*connect_go.Response[v1alpha1.ReviewAccessRequestResponse], error)
}

// NewAccessServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessServiceHandler(svc AccessServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	accessServiceEnsureAccessHandler := connect_go.NewUnaryHandler(
		AccessServiceEnsureAccessProcedure,
		svc.EnsureAccess,
		opts...,
	)
	accessServiceListAccessRequestsHandler := connect_go.NewUnaryHandler(
		AccessServiceListAccessRequestsProcedure,
		svc.ListAccessRequests,
		opts...,
	)
	accessServiceGetAccessRequestHandler := connect_go.NewUnaryHandler(
		AccessServiceGetAccessRequestProcedure,
		svc.GetAccessRequest,
		opts...,
	)
	accessServiceRevokeAccessRequestHandler := connect_go.NewUnaryHandler(
		AccessServiceRevokeAccessRequestProcedure,
		svc.RevokeAccessRequest,
		opts...,
	)
	accessServiceCancelAccessRequestHandler := connect_go.NewUnaryHandler(
		AccessServiceCancelAccessRequestProcedure,
		svc.CancelAccessRequest,
		opts...,
	)
	accessServiceReviewAccessRequestHandler := connect_go.NewUnaryHandler(
		AccessServiceReviewAccessRequestProcedure,
		svc.ReviewAccessRequest,
		opts...,
	)
	return "/commonfate.cloud.access.v1alpha1.AccessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessServiceEnsureAccessProcedure:
			accessServiceEnsureAccessHandler.ServeHTTP(w, r)
		case AccessServiceListAccessRequestsProcedure:
			accessServiceListAccessRequestsHandler.ServeHTTP(w, r)
		case AccessServiceGetAccessRequestProcedure:
			accessServiceGetAccessRequestHandler.ServeHTTP(w, r)
		case AccessServiceRevokeAccessRequestProcedure:
			accessServiceRevokeAccessRequestHandler.ServeHTTP(w, r)
		case AccessServiceCancelAccessRequestProcedure:
			accessServiceCancelAccessRequestHandler.ServeHTTP(w, r)
		case AccessServiceReviewAccessRequestProcedure:
			accessServiceReviewAccessRequestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessServiceHandler struct{}

func (UnimplementedAccessServiceHandler) EnsureAccess(context.Context, *connect_go.Request[v1alpha1.EnsureAccessRequest]) (*connect_go.Response[v1alpha1.EnsureAccessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.AccessService.EnsureAccess is not implemented"))
}

func (UnimplementedAccessServiceHandler) ListAccessRequests(context.Context, *connect_go.Request[v1alpha1.ListAccessRequestsRequest]) (*connect_go.Response[v1alpha1.ListAccessRequestsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.AccessService.ListAccessRequests is not implemented"))
}

func (UnimplementedAccessServiceHandler) GetAccessRequest(context.Context, *connect_go.Request[v1alpha1.GetAccessRequestRequest]) (*connect_go.Response[v1alpha1.GetAccessRequestResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.AccessService.GetAccessRequest is not implemented"))
}

func (UnimplementedAccessServiceHandler) RevokeAccessRequest(context.Context, *connect_go.Request[v1alpha1.RevokeAccessRequestRequest]) (*connect_go.Response[v1alpha1.RevokeAccessRequestResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.AccessService.RevokeAccessRequest is not implemented"))
}

func (UnimplementedAccessServiceHandler) CancelAccessRequest(context.Context, *connect_go.Request[v1alpha1.CancelAccessRequestRequest]) (*connect_go.Response[v1alpha1.CancelAccessRequestResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.AccessService.CancelAccessRequest is not implemented"))
}

func (UnimplementedAccessServiceHandler) ReviewAccessRequest(context.Context, *connect_go.Request[v1alpha1.ReviewAccessRequestRequest]) (*connect_go.Response[v1alpha1.ReviewAccessRequestResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.AccessService.ReviewAccessRequest is not implemented"))
}
