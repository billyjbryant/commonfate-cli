// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/config/v1alpha1/config.proto

package configv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/ciem/gen/commonfate/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "commonfate.config.v1alpha1.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceCreateIdentitySourceProcedure is the fully-qualified name of the ConfigService's
	// CreateIdentitySource RPC.
	ConfigServiceCreateIdentitySourceProcedure = "/commonfate.config.v1alpha1.ConfigService/CreateIdentitySource"
	// ConfigServiceReadIdentitySourceProcedure is the fully-qualified name of the ConfigService's
	// ReadIdentitySource RPC.
	ConfigServiceReadIdentitySourceProcedure = "/commonfate.config.v1alpha1.ConfigService/ReadIdentitySource"
	// ConfigServiceUpdateIdentitySourceProcedure is the fully-qualified name of the ConfigService's
	// UpdateIdentitySource RPC.
	ConfigServiceUpdateIdentitySourceProcedure = "/commonfate.config.v1alpha1.ConfigService/UpdateIdentitySource"
	// ConfigServiceDeleteIdentitySourceProcedure is the fully-qualified name of the ConfigService's
	// DeleteIdentitySource RPC.
	ConfigServiceDeleteIdentitySourceProcedure = "/commonfate.config.v1alpha1.ConfigService/DeleteIdentitySource"
	// ConfigServiceCreateAccessPolicyProcedure is the fully-qualified name of the ConfigService's
	// CreateAccessPolicy RPC.
	ConfigServiceCreateAccessPolicyProcedure = "/commonfate.config.v1alpha1.ConfigService/CreateAccessPolicy"
	// ConfigServiceReadAccessPolicyProcedure is the fully-qualified name of the ConfigService's
	// ReadAccessPolicy RPC.
	ConfigServiceReadAccessPolicyProcedure = "/commonfate.config.v1alpha1.ConfigService/ReadAccessPolicy"
	// ConfigServiceUpdateAccessPolicyProcedure is the fully-qualified name of the ConfigService's
	// UpdateAccessPolicy RPC.
	ConfigServiceUpdateAccessPolicyProcedure = "/commonfate.config.v1alpha1.ConfigService/UpdateAccessPolicy"
	// ConfigServiceDeleteAccessPolicyProcedure is the fully-qualified name of the ConfigService's
	// DeleteAccessPolicy RPC.
	ConfigServiceDeleteAccessPolicyProcedure = "/commonfate.config.v1alpha1.ConfigService/DeleteAccessPolicy"
	// ConfigServiceCreateGCPConnectionProcedure is the fully-qualified name of the ConfigService's
	// CreateGCPConnection RPC.
	ConfigServiceCreateGCPConnectionProcedure = "/commonfate.config.v1alpha1.ConfigService/CreateGCPConnection"
	// ConfigServiceReadGCPConnectionProcedure is the fully-qualified name of the ConfigService's
	// ReadGCPConnection RPC.
	ConfigServiceReadGCPConnectionProcedure = "/commonfate.config.v1alpha1.ConfigService/ReadGCPConnection"
	// ConfigServiceUpdateGCPConnectionProcedure is the fully-qualified name of the ConfigService's
	// UpdateGCPConnection RPC.
	ConfigServiceUpdateGCPConnectionProcedure = "/commonfate.config.v1alpha1.ConfigService/UpdateGCPConnection"
	// ConfigServiceDeleteGCPConnectionProcedure is the fully-qualified name of the ConfigService's
	// DeleteGCPConnection RPC.
	ConfigServiceDeleteGCPConnectionProcedure = "/commonfate.config.v1alpha1.ConfigService/DeleteGCPConnection"
	// ConfigServiceCreateApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// CreateApprovalWorkflow RPC.
	ConfigServiceCreateApprovalWorkflowProcedure = "/commonfate.config.v1alpha1.ConfigService/CreateApprovalWorkflow"
	// ConfigServiceReadApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// ReadApprovalWorkflow RPC.
	ConfigServiceReadApprovalWorkflowProcedure = "/commonfate.config.v1alpha1.ConfigService/ReadApprovalWorkflow"
	// ConfigServiceUpdateApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// UpdateApprovalWorkflow RPC.
	ConfigServiceUpdateApprovalWorkflowProcedure = "/commonfate.config.v1alpha1.ConfigService/UpdateApprovalWorkflow"
	// ConfigServiceDeleteApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// DeleteApprovalWorkflow RPC.
	ConfigServiceDeleteApprovalWorkflowProcedure = "/commonfate.config.v1alpha1.ConfigService/DeleteApprovalWorkflow"
	// ConfigServiceCreatePermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// CreatePermissionMapping RPC.
	ConfigServiceCreatePermissionMappingProcedure = "/commonfate.config.v1alpha1.ConfigService/CreatePermissionMapping"
	// ConfigServiceReadPermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// ReadPermissionMapping RPC.
	ConfigServiceReadPermissionMappingProcedure = "/commonfate.config.v1alpha1.ConfigService/ReadPermissionMapping"
	// ConfigServiceUpdatePermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// UpdatePermissionMapping RPC.
	ConfigServiceUpdatePermissionMappingProcedure = "/commonfate.config.v1alpha1.ConfigService/UpdatePermissionMapping"
	// ConfigServiceDeletePermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// DeletePermissionMapping RPC.
	ConfigServiceDeletePermissionMappingProcedure = "/commonfate.config.v1alpha1.ConfigService/DeletePermissionMapping"
)

// ConfigServiceClient is a client for the commonfate.config.v1alpha1.ConfigService service.
type ConfigServiceClient interface {
	// IdentitySource CRUD operations
	CreateIdentitySource(context.Context, *connect_go.Request[v1alpha1.CreateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.CreateIdentitySourceResponse], error)
	ReadIdentitySource(context.Context, *connect_go.Request[v1alpha1.ReadIdentitySourceRequest]) (*connect_go.Response[v1alpha1.ReadIdentitySourceResponse], error)
	UpdateIdentitySource(context.Context, *connect_go.Request[v1alpha1.UpdateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.UpdateIdentitySourceResponse], error)
	DeleteIdentitySource(context.Context, *connect_go.Request[v1alpha1.DeleteIdentitySourceRequest]) (*connect_go.Response[v1alpha1.DeleteIdentitySourceResponse], error)
	// AccessPolicy CRUD operations
	CreateAccessPolicy(context.Context, *connect_go.Request[v1alpha1.CreateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.CreateAccessPolicyResponse], error)
	ReadAccessPolicy(context.Context, *connect_go.Request[v1alpha1.ReadAccessPolicyRequest]) (*connect_go.Response[v1alpha1.ReadAccessPolicyResponse], error)
	UpdateAccessPolicy(context.Context, *connect_go.Request[v1alpha1.UpdateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.UpdateAccessPolicyResponse], error)
	DeleteAccessPolicy(context.Context, *connect_go.Request[v1alpha1.DeleteAccessPolicyRequest]) (*connect_go.Response[v1alpha1.DeleteAccessPolicyResponse], error)
	// GCPConnection CRUD operations
	CreateGCPConnection(context.Context, *connect_go.Request[v1alpha1.CreateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.CreateGCPConnectionResponse], error)
	ReadGCPConnection(context.Context, *connect_go.Request[v1alpha1.ReadGCPConnectionRequest]) (*connect_go.Response[v1alpha1.ReadGCPConnectionResponse], error)
	UpdateGCPConnection(context.Context, *connect_go.Request[v1alpha1.UpdateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.UpdateGCPConnectionResponse], error)
	DeleteGCPConnection(context.Context, *connect_go.Request[v1alpha1.DeleteGCPConnectionRequest]) (*connect_go.Response[v1alpha1.DeleteGCPConnectionResponse], error)
	// ApprovalWorkflow CRUD operations
	CreateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error)
	ReadApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error)
	UpdateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error)
	DeleteApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error)
	// PermissionMapping CRUD operations
	CreatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error)
	ReadPermissionMapping(context.Context, *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error)
	UpdatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error)
	DeletePermissionMapping(context.Context, *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error)
}

// NewConfigServiceClient constructs a client for the commonfate.config.v1alpha1.ConfigService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configServiceClient{
		createIdentitySource: connect_go.NewClient[v1alpha1.CreateIdentitySourceRequest, v1alpha1.CreateIdentitySourceResponse](
			httpClient,
			baseURL+ConfigServiceCreateIdentitySourceProcedure,
			opts...,
		),
		readIdentitySource: connect_go.NewClient[v1alpha1.ReadIdentitySourceRequest, v1alpha1.ReadIdentitySourceResponse](
			httpClient,
			baseURL+ConfigServiceReadIdentitySourceProcedure,
			opts...,
		),
		updateIdentitySource: connect_go.NewClient[v1alpha1.UpdateIdentitySourceRequest, v1alpha1.UpdateIdentitySourceResponse](
			httpClient,
			baseURL+ConfigServiceUpdateIdentitySourceProcedure,
			opts...,
		),
		deleteIdentitySource: connect_go.NewClient[v1alpha1.DeleteIdentitySourceRequest, v1alpha1.DeleteIdentitySourceResponse](
			httpClient,
			baseURL+ConfigServiceDeleteIdentitySourceProcedure,
			opts...,
		),
		createAccessPolicy: connect_go.NewClient[v1alpha1.CreateAccessPolicyRequest, v1alpha1.CreateAccessPolicyResponse](
			httpClient,
			baseURL+ConfigServiceCreateAccessPolicyProcedure,
			opts...,
		),
		readAccessPolicy: connect_go.NewClient[v1alpha1.ReadAccessPolicyRequest, v1alpha1.ReadAccessPolicyResponse](
			httpClient,
			baseURL+ConfigServiceReadAccessPolicyProcedure,
			opts...,
		),
		updateAccessPolicy: connect_go.NewClient[v1alpha1.UpdateAccessPolicyRequest, v1alpha1.UpdateAccessPolicyResponse](
			httpClient,
			baseURL+ConfigServiceUpdateAccessPolicyProcedure,
			opts...,
		),
		deleteAccessPolicy: connect_go.NewClient[v1alpha1.DeleteAccessPolicyRequest, v1alpha1.DeleteAccessPolicyResponse](
			httpClient,
			baseURL+ConfigServiceDeleteAccessPolicyProcedure,
			opts...,
		),
		createGCPConnection: connect_go.NewClient[v1alpha1.CreateGCPConnectionRequest, v1alpha1.CreateGCPConnectionResponse](
			httpClient,
			baseURL+ConfigServiceCreateGCPConnectionProcedure,
			opts...,
		),
		readGCPConnection: connect_go.NewClient[v1alpha1.ReadGCPConnectionRequest, v1alpha1.ReadGCPConnectionResponse](
			httpClient,
			baseURL+ConfigServiceReadGCPConnectionProcedure,
			opts...,
		),
		updateGCPConnection: connect_go.NewClient[v1alpha1.UpdateGCPConnectionRequest, v1alpha1.UpdateGCPConnectionResponse](
			httpClient,
			baseURL+ConfigServiceUpdateGCPConnectionProcedure,
			opts...,
		),
		deleteGCPConnection: connect_go.NewClient[v1alpha1.DeleteGCPConnectionRequest, v1alpha1.DeleteGCPConnectionResponse](
			httpClient,
			baseURL+ConfigServiceDeleteGCPConnectionProcedure,
			opts...,
		),
		createApprovalWorkflow: connect_go.NewClient[v1alpha1.CreateApprovalWorkflowRequest, v1alpha1.CreateApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceCreateApprovalWorkflowProcedure,
			opts...,
		),
		readApprovalWorkflow: connect_go.NewClient[v1alpha1.ReadApprovalWorkflowRequest, v1alpha1.ReadApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceReadApprovalWorkflowProcedure,
			opts...,
		),
		updateApprovalWorkflow: connect_go.NewClient[v1alpha1.UpdateApprovalWorkflowRequest, v1alpha1.UpdateApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceUpdateApprovalWorkflowProcedure,
			opts...,
		),
		deleteApprovalWorkflow: connect_go.NewClient[v1alpha1.DeleteApprovalWorkflowRequest, v1alpha1.DeleteApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceDeleteApprovalWorkflowProcedure,
			opts...,
		),
		createPermissionMapping: connect_go.NewClient[v1alpha1.CreatePermissionMappingRequest, v1alpha1.CreatePermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceCreatePermissionMappingProcedure,
			opts...,
		),
		readPermissionMapping: connect_go.NewClient[v1alpha1.ReadPermissionMappingRequest, v1alpha1.ReadPermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceReadPermissionMappingProcedure,
			opts...,
		),
		updatePermissionMapping: connect_go.NewClient[v1alpha1.UpdatePermissionMappingRequest, v1alpha1.UpdatePermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceUpdatePermissionMappingProcedure,
			opts...,
		),
		deletePermissionMapping: connect_go.NewClient[v1alpha1.DeletePermissionMappingRequest, v1alpha1.DeletePermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceDeletePermissionMappingProcedure,
			opts...,
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	createIdentitySource    *connect_go.Client[v1alpha1.CreateIdentitySourceRequest, v1alpha1.CreateIdentitySourceResponse]
	readIdentitySource      *connect_go.Client[v1alpha1.ReadIdentitySourceRequest, v1alpha1.ReadIdentitySourceResponse]
	updateIdentitySource    *connect_go.Client[v1alpha1.UpdateIdentitySourceRequest, v1alpha1.UpdateIdentitySourceResponse]
	deleteIdentitySource    *connect_go.Client[v1alpha1.DeleteIdentitySourceRequest, v1alpha1.DeleteIdentitySourceResponse]
	createAccessPolicy      *connect_go.Client[v1alpha1.CreateAccessPolicyRequest, v1alpha1.CreateAccessPolicyResponse]
	readAccessPolicy        *connect_go.Client[v1alpha1.ReadAccessPolicyRequest, v1alpha1.ReadAccessPolicyResponse]
	updateAccessPolicy      *connect_go.Client[v1alpha1.UpdateAccessPolicyRequest, v1alpha1.UpdateAccessPolicyResponse]
	deleteAccessPolicy      *connect_go.Client[v1alpha1.DeleteAccessPolicyRequest, v1alpha1.DeleteAccessPolicyResponse]
	createGCPConnection     *connect_go.Client[v1alpha1.CreateGCPConnectionRequest, v1alpha1.CreateGCPConnectionResponse]
	readGCPConnection       *connect_go.Client[v1alpha1.ReadGCPConnectionRequest, v1alpha1.ReadGCPConnectionResponse]
	updateGCPConnection     *connect_go.Client[v1alpha1.UpdateGCPConnectionRequest, v1alpha1.UpdateGCPConnectionResponse]
	deleteGCPConnection     *connect_go.Client[v1alpha1.DeleteGCPConnectionRequest, v1alpha1.DeleteGCPConnectionResponse]
	createApprovalWorkflow  *connect_go.Client[v1alpha1.CreateApprovalWorkflowRequest, v1alpha1.CreateApprovalWorkflowResponse]
	readApprovalWorkflow    *connect_go.Client[v1alpha1.ReadApprovalWorkflowRequest, v1alpha1.ReadApprovalWorkflowResponse]
	updateApprovalWorkflow  *connect_go.Client[v1alpha1.UpdateApprovalWorkflowRequest, v1alpha1.UpdateApprovalWorkflowResponse]
	deleteApprovalWorkflow  *connect_go.Client[v1alpha1.DeleteApprovalWorkflowRequest, v1alpha1.DeleteApprovalWorkflowResponse]
	createPermissionMapping *connect_go.Client[v1alpha1.CreatePermissionMappingRequest, v1alpha1.CreatePermissionMappingResponse]
	readPermissionMapping   *connect_go.Client[v1alpha1.ReadPermissionMappingRequest, v1alpha1.ReadPermissionMappingResponse]
	updatePermissionMapping *connect_go.Client[v1alpha1.UpdatePermissionMappingRequest, v1alpha1.UpdatePermissionMappingResponse]
	deletePermissionMapping *connect_go.Client[v1alpha1.DeletePermissionMappingRequest, v1alpha1.DeletePermissionMappingResponse]
}

// CreateIdentitySource calls commonfate.config.v1alpha1.ConfigService.CreateIdentitySource.
func (c *configServiceClient) CreateIdentitySource(ctx context.Context, req *connect_go.Request[v1alpha1.CreateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.CreateIdentitySourceResponse], error) {
	return c.createIdentitySource.CallUnary(ctx, req)
}

// ReadIdentitySource calls commonfate.config.v1alpha1.ConfigService.ReadIdentitySource.
func (c *configServiceClient) ReadIdentitySource(ctx context.Context, req *connect_go.Request[v1alpha1.ReadIdentitySourceRequest]) (*connect_go.Response[v1alpha1.ReadIdentitySourceResponse], error) {
	return c.readIdentitySource.CallUnary(ctx, req)
}

// UpdateIdentitySource calls commonfate.config.v1alpha1.ConfigService.UpdateIdentitySource.
func (c *configServiceClient) UpdateIdentitySource(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.UpdateIdentitySourceResponse], error) {
	return c.updateIdentitySource.CallUnary(ctx, req)
}

// DeleteIdentitySource calls commonfate.config.v1alpha1.ConfigService.DeleteIdentitySource.
func (c *configServiceClient) DeleteIdentitySource(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteIdentitySourceRequest]) (*connect_go.Response[v1alpha1.DeleteIdentitySourceResponse], error) {
	return c.deleteIdentitySource.CallUnary(ctx, req)
}

// CreateAccessPolicy calls commonfate.config.v1alpha1.ConfigService.CreateAccessPolicy.
func (c *configServiceClient) CreateAccessPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.CreateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.CreateAccessPolicyResponse], error) {
	return c.createAccessPolicy.CallUnary(ctx, req)
}

// ReadAccessPolicy calls commonfate.config.v1alpha1.ConfigService.ReadAccessPolicy.
func (c *configServiceClient) ReadAccessPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.ReadAccessPolicyRequest]) (*connect_go.Response[v1alpha1.ReadAccessPolicyResponse], error) {
	return c.readAccessPolicy.CallUnary(ctx, req)
}

// UpdateAccessPolicy calls commonfate.config.v1alpha1.ConfigService.UpdateAccessPolicy.
func (c *configServiceClient) UpdateAccessPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.UpdateAccessPolicyResponse], error) {
	return c.updateAccessPolicy.CallUnary(ctx, req)
}

// DeleteAccessPolicy calls commonfate.config.v1alpha1.ConfigService.DeleteAccessPolicy.
func (c *configServiceClient) DeleteAccessPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteAccessPolicyRequest]) (*connect_go.Response[v1alpha1.DeleteAccessPolicyResponse], error) {
	return c.deleteAccessPolicy.CallUnary(ctx, req)
}

// CreateGCPConnection calls commonfate.config.v1alpha1.ConfigService.CreateGCPConnection.
func (c *configServiceClient) CreateGCPConnection(ctx context.Context, req *connect_go.Request[v1alpha1.CreateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.CreateGCPConnectionResponse], error) {
	return c.createGCPConnection.CallUnary(ctx, req)
}

// ReadGCPConnection calls commonfate.config.v1alpha1.ConfigService.ReadGCPConnection.
func (c *configServiceClient) ReadGCPConnection(ctx context.Context, req *connect_go.Request[v1alpha1.ReadGCPConnectionRequest]) (*connect_go.Response[v1alpha1.ReadGCPConnectionResponse], error) {
	return c.readGCPConnection.CallUnary(ctx, req)
}

// UpdateGCPConnection calls commonfate.config.v1alpha1.ConfigService.UpdateGCPConnection.
func (c *configServiceClient) UpdateGCPConnection(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.UpdateGCPConnectionResponse], error) {
	return c.updateGCPConnection.CallUnary(ctx, req)
}

// DeleteGCPConnection calls commonfate.config.v1alpha1.ConfigService.DeleteGCPConnection.
func (c *configServiceClient) DeleteGCPConnection(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteGCPConnectionRequest]) (*connect_go.Response[v1alpha1.DeleteGCPConnectionResponse], error) {
	return c.deleteGCPConnection.CallUnary(ctx, req)
}

// CreateApprovalWorkflow calls commonfate.config.v1alpha1.ConfigService.CreateApprovalWorkflow.
func (c *configServiceClient) CreateApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error) {
	return c.createApprovalWorkflow.CallUnary(ctx, req)
}

// ReadApprovalWorkflow calls commonfate.config.v1alpha1.ConfigService.ReadApprovalWorkflow.
func (c *configServiceClient) ReadApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error) {
	return c.readApprovalWorkflow.CallUnary(ctx, req)
}

// UpdateApprovalWorkflow calls commonfate.config.v1alpha1.ConfigService.UpdateApprovalWorkflow.
func (c *configServiceClient) UpdateApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error) {
	return c.updateApprovalWorkflow.CallUnary(ctx, req)
}

// DeleteApprovalWorkflow calls commonfate.config.v1alpha1.ConfigService.DeleteApprovalWorkflow.
func (c *configServiceClient) DeleteApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error) {
	return c.deleteApprovalWorkflow.CallUnary(ctx, req)
}

// CreatePermissionMapping calls commonfate.config.v1alpha1.ConfigService.CreatePermissionMapping.
func (c *configServiceClient) CreatePermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error) {
	return c.createPermissionMapping.CallUnary(ctx, req)
}

// ReadPermissionMapping calls commonfate.config.v1alpha1.ConfigService.ReadPermissionMapping.
func (c *configServiceClient) ReadPermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error) {
	return c.readPermissionMapping.CallUnary(ctx, req)
}

// UpdatePermissionMapping calls commonfate.config.v1alpha1.ConfigService.UpdatePermissionMapping.
func (c *configServiceClient) UpdatePermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error) {
	return c.updatePermissionMapping.CallUnary(ctx, req)
}

// DeletePermissionMapping calls commonfate.config.v1alpha1.ConfigService.DeletePermissionMapping.
func (c *configServiceClient) DeletePermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error) {
	return c.deletePermissionMapping.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the commonfate.config.v1alpha1.ConfigService
// service.
type ConfigServiceHandler interface {
	// IdentitySource CRUD operations
	CreateIdentitySource(context.Context, *connect_go.Request[v1alpha1.CreateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.CreateIdentitySourceResponse], error)
	ReadIdentitySource(context.Context, *connect_go.Request[v1alpha1.ReadIdentitySourceRequest]) (*connect_go.Response[v1alpha1.ReadIdentitySourceResponse], error)
	UpdateIdentitySource(context.Context, *connect_go.Request[v1alpha1.UpdateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.UpdateIdentitySourceResponse], error)
	DeleteIdentitySource(context.Context, *connect_go.Request[v1alpha1.DeleteIdentitySourceRequest]) (*connect_go.Response[v1alpha1.DeleteIdentitySourceResponse], error)
	// AccessPolicy CRUD operations
	CreateAccessPolicy(context.Context, *connect_go.Request[v1alpha1.CreateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.CreateAccessPolicyResponse], error)
	ReadAccessPolicy(context.Context, *connect_go.Request[v1alpha1.ReadAccessPolicyRequest]) (*connect_go.Response[v1alpha1.ReadAccessPolicyResponse], error)
	UpdateAccessPolicy(context.Context, *connect_go.Request[v1alpha1.UpdateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.UpdateAccessPolicyResponse], error)
	DeleteAccessPolicy(context.Context, *connect_go.Request[v1alpha1.DeleteAccessPolicyRequest]) (*connect_go.Response[v1alpha1.DeleteAccessPolicyResponse], error)
	// GCPConnection CRUD operations
	CreateGCPConnection(context.Context, *connect_go.Request[v1alpha1.CreateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.CreateGCPConnectionResponse], error)
	ReadGCPConnection(context.Context, *connect_go.Request[v1alpha1.ReadGCPConnectionRequest]) (*connect_go.Response[v1alpha1.ReadGCPConnectionResponse], error)
	UpdateGCPConnection(context.Context, *connect_go.Request[v1alpha1.UpdateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.UpdateGCPConnectionResponse], error)
	DeleteGCPConnection(context.Context, *connect_go.Request[v1alpha1.DeleteGCPConnectionRequest]) (*connect_go.Response[v1alpha1.DeleteGCPConnectionResponse], error)
	// ApprovalWorkflow CRUD operations
	CreateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error)
	ReadApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error)
	UpdateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error)
	DeleteApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error)
	// PermissionMapping CRUD operations
	CreatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error)
	ReadPermissionMapping(context.Context, *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error)
	UpdatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error)
	DeletePermissionMapping(context.Context, *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	configServiceCreateIdentitySourceHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateIdentitySourceProcedure,
		svc.CreateIdentitySource,
		opts...,
	)
	configServiceReadIdentitySourceHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadIdentitySourceProcedure,
		svc.ReadIdentitySource,
		opts...,
	)
	configServiceUpdateIdentitySourceHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateIdentitySourceProcedure,
		svc.UpdateIdentitySource,
		opts...,
	)
	configServiceDeleteIdentitySourceHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteIdentitySourceProcedure,
		svc.DeleteIdentitySource,
		opts...,
	)
	configServiceCreateAccessPolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateAccessPolicyProcedure,
		svc.CreateAccessPolicy,
		opts...,
	)
	configServiceReadAccessPolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadAccessPolicyProcedure,
		svc.ReadAccessPolicy,
		opts...,
	)
	configServiceUpdateAccessPolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateAccessPolicyProcedure,
		svc.UpdateAccessPolicy,
		opts...,
	)
	configServiceDeleteAccessPolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteAccessPolicyProcedure,
		svc.DeleteAccessPolicy,
		opts...,
	)
	configServiceCreateGCPConnectionHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateGCPConnectionProcedure,
		svc.CreateGCPConnection,
		opts...,
	)
	configServiceReadGCPConnectionHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadGCPConnectionProcedure,
		svc.ReadGCPConnection,
		opts...,
	)
	configServiceUpdateGCPConnectionHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateGCPConnectionProcedure,
		svc.UpdateGCPConnection,
		opts...,
	)
	configServiceDeleteGCPConnectionHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteGCPConnectionProcedure,
		svc.DeleteGCPConnection,
		opts...,
	)
	configServiceCreateApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateApprovalWorkflowProcedure,
		svc.CreateApprovalWorkflow,
		opts...,
	)
	configServiceReadApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadApprovalWorkflowProcedure,
		svc.ReadApprovalWorkflow,
		opts...,
	)
	configServiceUpdateApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateApprovalWorkflowProcedure,
		svc.UpdateApprovalWorkflow,
		opts...,
	)
	configServiceDeleteApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteApprovalWorkflowProcedure,
		svc.DeleteApprovalWorkflow,
		opts...,
	)
	configServiceCreatePermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreatePermissionMappingProcedure,
		svc.CreatePermissionMapping,
		opts...,
	)
	configServiceReadPermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadPermissionMappingProcedure,
		svc.ReadPermissionMapping,
		opts...,
	)
	configServiceUpdatePermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdatePermissionMappingProcedure,
		svc.UpdatePermissionMapping,
		opts...,
	)
	configServiceDeletePermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeletePermissionMappingProcedure,
		svc.DeletePermissionMapping,
		opts...,
	)
	return "/commonfate.config.v1alpha1.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceCreateIdentitySourceProcedure:
			configServiceCreateIdentitySourceHandler.ServeHTTP(w, r)
		case ConfigServiceReadIdentitySourceProcedure:
			configServiceReadIdentitySourceHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateIdentitySourceProcedure:
			configServiceUpdateIdentitySourceHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteIdentitySourceProcedure:
			configServiceDeleteIdentitySourceHandler.ServeHTTP(w, r)
		case ConfigServiceCreateAccessPolicyProcedure:
			configServiceCreateAccessPolicyHandler.ServeHTTP(w, r)
		case ConfigServiceReadAccessPolicyProcedure:
			configServiceReadAccessPolicyHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateAccessPolicyProcedure:
			configServiceUpdateAccessPolicyHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteAccessPolicyProcedure:
			configServiceDeleteAccessPolicyHandler.ServeHTTP(w, r)
		case ConfigServiceCreateGCPConnectionProcedure:
			configServiceCreateGCPConnectionHandler.ServeHTTP(w, r)
		case ConfigServiceReadGCPConnectionProcedure:
			configServiceReadGCPConnectionHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateGCPConnectionProcedure:
			configServiceUpdateGCPConnectionHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteGCPConnectionProcedure:
			configServiceDeleteGCPConnectionHandler.ServeHTTP(w, r)
		case ConfigServiceCreateApprovalWorkflowProcedure:
			configServiceCreateApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceReadApprovalWorkflowProcedure:
			configServiceReadApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateApprovalWorkflowProcedure:
			configServiceUpdateApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteApprovalWorkflowProcedure:
			configServiceDeleteApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceCreatePermissionMappingProcedure:
			configServiceCreatePermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceReadPermissionMappingProcedure:
			configServiceReadPermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceUpdatePermissionMappingProcedure:
			configServiceUpdatePermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceDeletePermissionMappingProcedure:
			configServiceDeletePermissionMappingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) CreateIdentitySource(context.Context, *connect_go.Request[v1alpha1.CreateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.CreateIdentitySourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.CreateIdentitySource is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadIdentitySource(context.Context, *connect_go.Request[v1alpha1.ReadIdentitySourceRequest]) (*connect_go.Response[v1alpha1.ReadIdentitySourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.ReadIdentitySource is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateIdentitySource(context.Context, *connect_go.Request[v1alpha1.UpdateIdentitySourceRequest]) (*connect_go.Response[v1alpha1.UpdateIdentitySourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.UpdateIdentitySource is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteIdentitySource(context.Context, *connect_go.Request[v1alpha1.DeleteIdentitySourceRequest]) (*connect_go.Response[v1alpha1.DeleteIdentitySourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.DeleteIdentitySource is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreateAccessPolicy(context.Context, *connect_go.Request[v1alpha1.CreateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.CreateAccessPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.CreateAccessPolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadAccessPolicy(context.Context, *connect_go.Request[v1alpha1.ReadAccessPolicyRequest]) (*connect_go.Response[v1alpha1.ReadAccessPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.ReadAccessPolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateAccessPolicy(context.Context, *connect_go.Request[v1alpha1.UpdateAccessPolicyRequest]) (*connect_go.Response[v1alpha1.UpdateAccessPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.UpdateAccessPolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteAccessPolicy(context.Context, *connect_go.Request[v1alpha1.DeleteAccessPolicyRequest]) (*connect_go.Response[v1alpha1.DeleteAccessPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.DeleteAccessPolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreateGCPConnection(context.Context, *connect_go.Request[v1alpha1.CreateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.CreateGCPConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.CreateGCPConnection is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadGCPConnection(context.Context, *connect_go.Request[v1alpha1.ReadGCPConnectionRequest]) (*connect_go.Response[v1alpha1.ReadGCPConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.ReadGCPConnection is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateGCPConnection(context.Context, *connect_go.Request[v1alpha1.UpdateGCPConnectionRequest]) (*connect_go.Response[v1alpha1.UpdateGCPConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.UpdateGCPConnection is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteGCPConnection(context.Context, *connect_go.Request[v1alpha1.DeleteGCPConnectionRequest]) (*connect_go.Response[v1alpha1.DeleteGCPConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.DeleteGCPConnection is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.CreateApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.ReadApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.UpdateApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.DeleteApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.CreatePermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadPermissionMapping(context.Context, *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.ReadPermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.UpdatePermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeletePermissionMapping(context.Context, *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.config.v1alpha1.ConfigService.DeletePermissionMapping is not implemented"))
}
